#include <iostream>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "esp_system.h"
#include "driver/adc.h"
#include "benchmark.hpp"

class bool_cycle : public gen::base_generator<bool_cycle, bool> {
  bool _b{true};

 public:
  IT(bool_cycle, bool);
  bool hasNext() { return true; }
  bool next() {
    _b = !_b;
    return _b;
  }
  bool curr() { return _b; }
};


extern "C" void app_main(void) {
  std::chrono::seconds iters = std::chrono::seconds(2);
  volatile int64_t VAR_ITERS = 100000LL;
  std::cout << "[RUNTIME:" << iters.count() << "s] ALL TIME IS IN MS\n";
  
  benchmark CONST_Range_stride_skip_half("CONST_Range_stride_skip_half", iters, []() {
    int64_t sum = 0;
    auto range_gen = gen::range(100000LL);
    auto sum_range = pipe::stride(2LL) >>= sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_stride_skip_half.run();

  benchmark CONST_ForLoop_stride_skip_half("CONST_ForLoop_stride_skip_half", iters, []() {
    int64_t sum = 0;
    int64_t stride = 0;
    for (int64_t i = 0; i < 100000LL; ++i) {
      if (stride == 0) {
        sum += i;
        stride = 1;
      } else {
        --stride;
      }
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_stride_skip_half.run();

  benchmark CONST_Range_bool_partition_skip_half("CONST_Range_bool_partition_skip_half", iters, []() {
    int64_t sum = 0;
    auto bool_gen = bool_cycle();
    auto range_gen = gen::range(100000LL);
    auto mux_gen = gen::mux(bool_gen, range_gen);
    auto sum_range = pipe::partition(
        [](auto b, auto i) { return b; },
        pipe::transform([](auto b, auto i) { return i; }) >>= sink::sum(sum),
        sink::hole());
    mux_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_bool_partition_skip_half.run();

benchmark CONST_ForLoop_bool_partition_skip_half("CONST_ForLoop_bool_partition_skip_half", iters, []() {
    int64_t sum = 0;
    bool skip = false;
    for (int64_t i = 0; i < 100000LL; ++i) {
      if (skip) {
        skip = false;
      } else {
        sum += i;
        skip = true;
      }
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_bool_partition_skip_half.run();

  benchmark CONST_Range_bool_arithmetic_skip_half("CONST_Range_bool_arithmetic_skip_half", iters, []() {
    int64_t sum = 0;
    auto bool_gen = bool_cycle();
    auto range_gen = gen::range(100000LL);
    auto mux_gen = gen::mux(bool_gen, range_gen);
    auto sum_range = pipe::transform([](auto b, auto i) { return (i * b); }) >>=
        sink::sum(sum);
    mux_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_bool_arithmetic_skip_half.run();

  benchmark CONST_ForLoop_bool_artihmetic_skip_half("CONST_ForLoop_bool_artihmetic_skip_half", iters, []() {
    int64_t sum = 0;
    bool keep = true;
    for (int64_t i = 0; i < 100000LL; ++i) {
      auto temp = (i * keep);
      sum += temp;
      keep = !keep;
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_bool_artihmetic_skip_half.run();

  benchmark CONST_Range_even_partition_skip_half("CONST_Range_even_partition_skip_half", iters, []() {
    int64_t sum = 0;
    auto range_gen = gen::range(100000LL);
    auto sum_range = pipe::partition([](auto i) { return ((i & 1) == 0); },
                                     sink::sum(sum), sink::hole());
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_even_partition_skip_half.run();

  benchmark CONST_ForLoop_even_partition_skip_half("CONST_ForLoop_even_partition_skip_half", iters, []() {
    int64_t sum = 0;
    for (int64_t i = 0; i < 100000LL; ++i) {
      if ((i & 1) == 0) {
        sum += i;
      }
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_even_partition_skip_half.run();

  benchmark CONST_Range_even_arithmetic_skip_half("CONST_Range_even_arithmetic_skip_half", iters, []() {
    int64_t sum = 0;
    auto range_gen = gen::range(100000LL);
    auto sum_range =
        pipe::transform([](auto i) { return i * ((i & 1) == 0); }) >>=
        sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_even_arithmetic_skip_half.run();

  benchmark CONST_ForLoop_even_arithmetic_skip_half("CONST_ForLoop_even_arithmetic_skip_half", iters, []() {
    int64_t sum = 0;
    for (int64_t i = 0; i < 100000LL; ++i) {
      auto temp = (((i & 1) == 0) * i);
      sum += temp;
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_even_arithmetic_skip_half.run();

  benchmark CONST_Range_plus2_skip_half("CONST_Range_plus2_skip_half", iters,  [](){
    int64_t sum = 0;
    auto range_gen = gen::range(0LL, 100000LL, 2LL);
    auto sum_range = sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  CONST_Range_plus2_skip_half.run();
    

  benchmark CONST_ForLoop_plus2_skip_half("CONST_ForLoop_plus2_skip_half", iters, []() {
    int64_t sum = 0;
    for (int64_t i = 0; i < 100000LL; i+=2) {
      sum += i;
    }
    assert(sum == 2499950000LL);
  });
  CONST_ForLoop_plus2_skip_half.run();

  ////////////////////////////////
  //          VARIABLE          //
  ////////////////////////////////

  benchmark VAR_Range_stride_skip_half("VAR_Range_stride_skip_half", iters, [&]() {
    int64_t sum = 0;
    auto range_gen = gen::range(VAR_ITERS);
    auto sum_range = pipe::stride(2) >>= sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_stride_skip_half.run();

  benchmark VAR_ForLoop_stride_skip_half("VAR_ForLoop_stride_skip_half", iters, [&]() {
    int64_t sum = 0;
    int64_t stride = 0;
    for (int64_t i = 0; i < VAR_ITERS; ++i) {
      if (stride == 0) {
        sum += i;
        stride = 1;
      } else {
        --stride;
      }
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_stride_skip_half.run();

  benchmark VAR_Range_bool_partition_skip_half("VAR_Range_bool_partition_skip_half", iters, [&]() {
    int64_t sum = 0;
    auto bool_gen = bool_cycle();
    auto range_gen = gen::range(VAR_ITERS);
    auto mux_gen = gen::mux(bool_gen, range_gen);
    auto sum_range = pipe::partition(
        [](auto b, auto i) { return b; },
        pipe::transform([](auto b, auto i) { return i; }) >>= sink::sum(sum),
        sink::hole());
    mux_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_bool_partition_skip_half.run();

  benchmark VAR_ForLoop_bool_partition_skip_half("VAR_ForLoop_bool_partition_skip_half", iters, [&]() {
    int64_t sum = 0;
    bool skip = false;
    for (int64_t i = 0; i < VAR_ITERS; ++i) {
      if (skip) {
        skip = false;
      } else {
        sum += i;
        skip = true;
      }
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_bool_partition_skip_half.run();

  benchmark VAR_Range_bool_arithmetic_skip_half("VAR_Range_bool_arithmetic_skip_half", iters, [&]() {
    int64_t sum = 0;
    auto bool_gen = bool_cycle();
    auto range_gen = gen::range(VAR_ITERS);
    auto mux_gen = gen::mux(bool_gen, range_gen);
    auto sum_range = pipe::transform([](auto b, auto i) { return (i * b); }) >>=
        sink::sum(sum);
    mux_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_bool_arithmetic_skip_half.run();

  benchmark VAR_ForLoop_bool_artihmetic_skip_half("VAR_ForLoop_bool_artihmetic_skip_half", iters, [&]() {
    int64_t sum = 0;
    bool keep = true;
    for (int64_t i = 0; i < VAR_ITERS; ++i) {
      auto temp = (i * keep);
      sum += temp;
      keep = !keep;
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_bool_artihmetic_skip_half.run();

  benchmark VAR_Range_even_partition_skip_half("VAR_Range_even_partition_skip_half", iters, [&]() {
    int64_t sum = 0;
    auto range_gen = gen::range(VAR_ITERS);
    auto sum_range = pipe::partition([](auto i) { return ((i & 1) == 0); },
                                     sink::sum(sum), sink::hole());
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_even_partition_skip_half.run();

  benchmark VAR_ForLoop_even_partition_skip_half("VAR_ForLoop_even_partition_skip_half", iters, [&]() {
    int64_t sum = 0;
    for (int64_t i = 0; i < VAR_ITERS; ++i) {
      if ((i & 1) == 0) {
        sum += i;
      }
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_even_partition_skip_half.run();


  benchmark VAR_Range_even_arithmetic_skip_half("VAR_Range_even_arithmetic_skip_half", iters, [&]() {
    int64_t sum = 0;
    auto range_gen = gen::range(VAR_ITERS);
    auto sum_range =
        pipe::transform([](auto i) { return i * ((i & 1) == 0); }) >>=
        sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_even_arithmetic_skip_half.run();

  benchmark VAR_ForLoop_even_arithmetic_skip_half("VAR_ForLoop_even_arithmetic_skip_half", iters, [&]() {
    int64_t sum = 0;
    for (int64_t i = 0; i < VAR_ITERS; ++i) {
      auto temp = (((i & 1) == 0) * i);
      sum += temp;
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_even_arithmetic_skip_half.run();

  benchmark VAR_Range_plus2_skip_half("VAR_Range_plus2_skip_half", iters, [&](){
    int64_t sum = 0;
    auto range_gen = gen::range(0LL, VAR_ITERS, 2LL);
    auto sum_range = sink::sum(sum);
    range_gen >>= sum_range;
    assert(sum == 2499950000LL);
  });
  VAR_Range_plus2_skip_half.run();

  benchmark VAR_ForLoop_plus2_skip_half("VAR_ForLoop_plus2_skip_half", iters, [&]() {
    int64_t sum = 0;
    for (int64_t i = 0; i < VAR_ITERS; i+=2) {
      sum += i;
    }
    assert(sum == 2499950000LL);
  });
  VAR_ForLoop_plus2_skip_half.run();
  
}
