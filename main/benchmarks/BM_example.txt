#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/unistd.h>

#include <chrono>
#include <fstream>
#include <iostream>

#include "esp_err.h"
#include "esp_log.h"
#include "esp_vfs_fat.h"

#include "dfl/dfl.hpp"
#include "benchmark.hpp"
using namespace dfl;

static const char *TAG = "example";

template <typename T>
class sum_pipeline : public pipeline_base<sum_pipeline<T>> {
   public:
    template<typename V>
    void onReceive(V&& value) {
        _acc += value;
    }

    explicit sum_pipeline(T val) : _acc(val) {}

   private:
    T _acc;
};

/**
 * Pipe component for running a function for each element of a pipeline
 * @param function
 * @return itself
*/
template <typename T>
sum_pipeline<T> sum_o(T&& val) {
    return sum_pipeline<T>{val};
}


// Handle of the wear levelling library instance
static wl_handle_t s_wl_handle = WL_INVALID_HANDLE;

// Mount path for the partition
const char *base_path = "/spiflash";


template <typename T>
class file_fstream_gen : public gen::base_generator<file_fstream_gen<T>, T> {
  std::fstream _stream;
  T _curr;
  bool _more;

 public:
  file_fstream_gen(const char* path) : _stream{path} { 
      _stream >> _curr;
    }
  IT(file_fstream_gen<T>, T);
  bool hasNext() { return _more; }
  T next() {
    _stream >> _curr;
    _more = (_curr != 0);
    return _curr;
  }
  T curr() { return _curr; }

  void close() {
      _stream.close();
  }
};

class file_fscanf_gen : public gen::base_generator<file_fscanf_gen, int64_t> {
  FILE* _fp;
  int64_t _curr;
  bool _more = true;

 public:
  file_fscanf_gen(FILE* fp) : _fp{fp} {
    fscanf(_fp, "%lld", &_curr);
  }
  IT(file_fscanf_gen, int64_t);
  bool hasNext() { return _more; }
  int64_t next() {
    fscanf(_fp, "%lld", &_curr);
    _more = _curr != 0;
    return _curr;
  }
  int64_t curr() { return _curr; }
};

int const_val() { return 42; }
int random_val() { return rand(); }

class const_gen
    : public gen::base_generator<const_gen, decltype(const_val())> {
  using T = decltype(const_val());
  T _curr;

 public:
  const_gen() { _curr = const_val(); }
  IT(const_gen, T);
  bool hasNext() { return true; }
  T curr() { return _curr; }
  T next() {
    _curr = const_val();
    return _curr;
  }
};

class random_gen
    : public gen::base_generator<random_gen, decltype(random_val())> {
  using T = decltype(random_val());

 private:
  T _curr;

 public:
  random_gen() { _curr = random_val(); }
  IT(random_gen, T);
  bool hasNext() { return true; }
  T curr() { return _curr; }
  T next() { _curr = random_val(); return _curr; }
};


extern "C" void app_main(void) {
    std::chrono::seconds runtime_max = std::chrono::seconds(2);
    volatile int64_t VAR_ITERS = 100000LL;

    BENCHMARK("VAR_GENERATOR_const_value", runtime_max, [=](){
        auto val = 0;
        auto s_gen = mod::take(VAR_ITERS, const_gen());
        s_gen >>= sink::for_each([&](auto i) { val = i; });
        assert(val == 42);
    });

    BENCHMARK("VAR_LOOP_const_value", runtime_max, [=](){
        auto val = 0;
        for (auto i = 0; i < VAR_ITERS; ++i) {
            val = const_val();
        }
        assert(val == 42);
    });
}
