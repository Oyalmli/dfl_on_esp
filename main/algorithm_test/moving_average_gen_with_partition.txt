#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/stat.h>
#include <sys/unistd.h>

#include <chrono>
#include <fstream>
#include <iostream>

#include "esp_err.h"
#include "esp_log.h"
#include "esp_vfs_fat.h"

#include "dfl/dfl.hpp"

using namespace dfl;

static const char* TAG = "example";

// Handle of the wear levelling library instance
static wl_handle_t s_wl_handle = WL_INVALID_HANDLE;

// Mount path for the partition
const char* base_path = "/spiflash";

bool write_file(const char* path) {
  ESP_LOGI(TAG, "Setting up...");
  esp_vfs_fat_mount_config_t mount_config;
  mount_config.max_files = 4;
  mount_config.format_if_mount_failed = true;
  mount_config.allocation_unit_size = CONFIG_WL_SECTOR_SIZE;

  esp_err_t err = esp_vfs_fat_spiflash_mount(base_path, "storage",
                                             &mount_config, &s_wl_handle);
  if (err != ESP_OK) {
    ESP_LOGE(TAG, "Failed to mount FATFS (%s)", esp_err_to_name(err));
    return false;
  }

  ESP_LOGI(TAG, "Copying file to filesystem...");
  extern const char data_start[] asm("_binary_data_inp_txt_start");
  extern const char data_end[] asm("_binary_data_inp_txt_end");
  FILE* f = fopen(path, "wb");

  if (f == NULL) {
    ESP_LOGE(TAG, "Failed to open file for writing");
    return false;
  }
  fwrite(data_start, sizeof(char), data_end - data_start + 1, f);
  fclose(f);
  ESP_LOGI(TAG, "Finished writing to file");
  return true;
}

bool open_file(const char* path) {
  FILE* fp = fopen(path, "r");
  if (fp == nullptr) return false;
  return true;
}

template <typename T, size_t N>
class restricted_avg : public dfl_base {
 public:
  template <typename... Values, typename TailPipeline>
  void onReceive(Values&&... values, TailPipeline&& tailPipeline) {
    send(FWD(get_avg(values...)), tailPipeline);
  }
  restricted_avg(double delta, size_t skippable)
      : _total{0}, _delta{delta}, _skippable{skippable} {}

 private:
  T _samples[N];
  size_t _num_samples{0};
  T _total;
  double _delta;
  size_t _skipped{0};
  size_t _skippable;

  T diff(T a, T b) { return a > b ? a - b : b - a; }

  float get_avg(T sample) {
    T avg = _total / static_cast<double>(std::min(_num_samples, N));
    if (diff(sample, avg) > _delta && _skipped < _skippable) {
      _skipped++;
      return avg;
    }
    _skipped = 0;
    _total += sample;
    if (_num_samples < N)
      _samples[_num_samples++] = sample;
    else {
      T& oldest = _samples[_num_samples++ % N];
      _total -= oldest;
      oldest = sample;
    }
    return _total / static_cast<double>(std::min(_num_samples, N));
  }
};

template <typename State>
class set_state : public dfl_base {
  State& _state;

 public:
  template <typename Value>
  void onReceive(Value&& value) {
    _state.diff = _state.prev > _state.moving_avg
        ? _state.prev - _state.moving_avg
        : _state.moving_avg - _state.prev;
    _state.prev = value;
  }
  set_state(State& state) : _state(state) {}
};

extern "C" void app_main(void) {
  if (!write_file("/spiflash/data_inp.txt")) return;
  FILE* fp = fopen("/spiflash/data_inp.txt", "r");
  if (fp == nullptr) {
    ESP_LOGE(TAG, "Could not open file");
  }

  struct State {
    double moving_avg = 0;
    double diff = 0;
    double prev = 0;
  } state;

  auto start = std::chrono::high_resolution_clock::now();
  auto file_gen = gen::file<double>(fp);
  float sum = 0.0;

  file_gen 
  >>= pipe::tee(
    pipe::fork(
        pipe::filter([](auto reading) { return reading > 14 && reading < 30; })
        >>= restricted_avg<double, 5>(0.5, 1)
        >>= pipe::set_state([](auto f, State& state) { state.moving_avg = f; }, state) 
        >>= sink::hole(),
        set_state(state)
    )
  ) 
  >>= pipe::transform_s([](auto f, State& state) { return state.diff > 0.5 ? 1 : 0; },state) 
  //>>= sink::sum(sum);  // without print version
  >>= sink::printf("%d\n"); //with print version

  printf("sum: %f\n", sum);
  auto stop = std::chrono::high_resolution_clock::now();
  auto duration =
      std::chrono::duration_cast<std::chrono::microseconds>(stop - start)
          .count();
  fclose(fp);
  printf("Took: %lld\n", duration);
}
